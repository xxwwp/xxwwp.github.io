{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/docs/notes/docker 笔记",
    "result": {"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"序"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本笔记记录我的 docker 学习记录，参考教材来源于 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/get-started/overview/"},"children":[{"type":"text","value":"docker 教程"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-tutorial.html"},"children":[{"type":"text","value":"docker | 菜鸟教程"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其中，"},{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-tutorial.html"},"children":[{"type":"text","value":"docker | 菜鸟教程"}]},{"type":"text","value":" 的文章更工具化和短篇，可以快速查询知识点。而 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/get-started/overview/"},"children":[{"type":"text","value":"docker 教程"}]},{"type":"text","value":" 更加完整，毕竟是官网中译，可以查询更多的 api，但是也更加碎片化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"学习关键使用 windows 10 系统，安装参考 docker 官网推荐方式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"安装"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 运行在 linux 系统中，所以默认情况下，docker 是不能在 windows 系统中使用的。在 windows 中安装 docker 需要安装官方的桌面工具 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Docker Desktop"}]},{"type":"text","value":"，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"并且安装 WSL 2 支持 linux 虚拟机启动"}]},{"type":"text","value":"，不然 docker 就无法正常工作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"菜鸟教程上，使用 Hyper-V 来支持虚拟机，没有使用 Docker 官方的 WSL。我安装的是 WSL，有一些 bug，参见 "},{"type":"element","tagName":"a","properties":{"href":"#bugs"},"children":[{"type":"text","value":"bugs"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"要测试 docker 是否已经安装好，可以尝试命令："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" --version"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"安装并不是非常麻烦，但是我使用 docker 的时候非常慢，下载一些包直接半小时起步，所以需要镜像加持。"},{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-mirror-acceleration.html"},"children":[{"type":"text","value":"菜鸟教程 | Docker 镜像加速"}]},{"type":"text","value":" 一节介绍了如何更换到国内镜像。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"概念"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"哲学三问：docker 是什么？用在哪儿？能干啥？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 是什么？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 可以被理解为一个虚拟机管理器。"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"docker 指定的一个环境包来构建一个虚拟机。"}]},{"type":"text","value":" 例如使用 ubuntu 的包来构建一个 ubuntu 的虚拟机环境。同时用户可以配置这个虚拟机到一个指定环境，比如 lamp，nodejs，rust，ruby 等等。因为是虚拟机，所以回滚、重做等操作的成本极低，同时安全性扫描等都可以在本机直接进行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"docker 把指定的环境包称作 image（镜像或图像），根据 image 构建的虚拟机被称作 container （容器）。"}]},{"type":"text","value":" 大白话就是，镜像其实就是指某个配置好的系统安装包，例如 ubuntu，centos，这个安装包还可以预先进行配置，例如配置 lamp 或 nodejs 等基础应用后，再进行打包，docker 可以为这些镜像生成独立的虚拟机运行。而容器其实就是根据系统镜像创建的虚拟机而已。说爆了，docker 就类似一个虚拟机管理器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"因为容器是虚拟机，所以 docker 为容器之间的通讯建立了 network （网络）"}]},{"type":"text","value":"，docker 网络并不难，并不是需要网络工程师的水平才能使用，就类似打开你家的 Wifi 局域网管理而已。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 用在哪儿？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 肯定不是用来创建虚拟机进行测试或者学习的，当然也可以这么做，但是就太大材小用了。同其他虚拟机管理工具不同，docker 主要作用于生产环境而非开发环境，docker 使用命令行完成了虚拟机管理的一系列操作，例如镜像的增删改查、发布或拉取等，还有容器的增删改查、重启或暂停等等。可以轻松的使用几行甚至一行命令就创建一个虚拟机，因为是虚拟机，在里面进行的所有环境搭建和部署都不会污染到服务器本身。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 能干啥？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 为应用创建了独立可视化的环境，随着代码和架构像滚雪球一样滚大的时候，底层环境也会随之变化，不少的情况下是为了填坑。比如引入了某个库，依赖要求的版本太高，不得不升级，升级带来的 bug，不得不打补丁，但是这些操作很有可能都是遗留性问题，也就是说可以通过更换系统架构来消除，但是因为服务器上构建的应用各不相同，前端、后端、数据库、安全等等全部都挤到一起，很难确定更新的潜在隐患，也很难得到一套完善的处理方案。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个时候 docker 站了出来，docker 可以为各个应用分配虚拟环境，互不干扰。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 还为环境的更新部署查询等做出了完善的支持，让开发者对所处的环境一目了然。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"容器"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 根据指定的镜像可以构建一个容器，每个容器都是一个独立的虚拟机环境。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"创建一个容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run ubuntu:15.10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时你会发现什么都没发生，不过可以使用以下命令查看容器状态："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面命令中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ubuntu:15.10"}]},{"type":"text","value":" 就是一个镜像，如果本地存在此镜像，docker 会直接用来创建一个容器，如果没有，docker 就会从网络镜像仓库中获取此镜像。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"ps"}]},{"type":"text","value":" --all"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时会看到一个 ubuntu 容器处于退出状态，这就是刚才创建的容器。很不幸，这个容器已经关死了，因为没有启动项，也没有把它保持挂起，docker 启动容器后立马就会关闭。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"现在我们需要让 docker 为此虚拟机分配一个终端给我们，可以在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"run"}]},{"type":"text","value":" 后使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tty"}]},{"type":"text","value":" 参数让 docker 分配一个虚拟机的终端。命令将变成："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --tty ubuntu:15.10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但是此时我们还是不能访问这个容器，因为 docker 只是分配了一个终端给用户，docker 在命令执行结束后并不会关心后续的输入和指令，所以增加还要增加一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--interactive"}]},{"type":"text","value":" 命令保持标准输入，这样才能和容器的终端交互。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--interactive"}]},{"type":"text","value":" 也是有另一个功能就是 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"保持挂起"}]},{"type":"text","value":"，就算不使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tty"}]},{"type":"text","value":"，容器也不会立即停止，而是卡着。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"保持输入并分配终端："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --tty --interactive ubuntu:15.10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果此时执行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":"，那么容器就会关闭，我想没人会希望挂起一个终端来开发，所以此时我们需要使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 来把容器放到后台运行，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 会以分离模式运行 docker 命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 就不需要使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tty"}]},{"type":"text","value":" 分配终端了，那么命令可以修改为："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --interactive --detach ubuntu:15.10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 还会在分离容器后，返回容器的 ID 值，通过该 ID 值可以对容器进行访问、重启、关闭、删除等操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不过一般用户不需要记录此 ID 值，因为可以通过其他命令查看。使用以下命令可以查看当前创建的容器及其状态："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"ps"}]},{"type":"text","value":" --all"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"默认情况下，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker ps"}]},{"type":"text","value":" 不会显示已经关闭的容器，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--all"}]},{"type":"text","value":" 参数会显示所有容器，包括已经关闭的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分离模式下的容器如何访问？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以使用以下命令来访问一个分离模式下的容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"exec"}]},{"type":"text","value":" --tty --interactive 容器 /bin/bash"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/bin/bash"}]},{"type":"text","value":" 指定容器的命令，上面的命令访问了指定容器的交互式命令行，并且分配终端保持输入。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"容器还有很多命令，比如指定一个容器生成镜像，为容器打标签等等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tty"}]},{"type":"text","value":" 简写："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-t"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--interactive"}]},{"type":"text","value":" 简写："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-i"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 简写："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-d"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 的一行命令存在多个简写参数时，可以组合在一起，例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-d -i"}]},{"type":"text","value":" 可以写作 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-di"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 不同命令有可能存在相同简写但是意义完全不一样的情况，比如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker build -t"}]},{"type":"text","value":" 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" 是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tag"}]},{"type":"text","value":" 而非 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--tty"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"个人不是很推荐简写，时间长了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-di"}]},{"type":"text","value":" 这种写法都不知道自己在干什么。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"镜像"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 有一个开放的镜像库 "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/"},"children":[{"type":"text","value":"Dockerhub"}]},{"type":"text","value":"，这里记录了很多官方或第三方的镜像包。里面有仅仅是纯净系统的 centos，ubuntu，又或者是含有一个应用的 mysql，python，nginx，httpd，再或者是集成架构的 lamp，都可以在镜像库中找到。其次，用户还可以定制自己的镜像包并发布到 Dockerhub，方便拉起部署。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"大多数镜像都只做一件事，这样可以有效的降低业务架构的耦合度。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"比如一个 ubuntu 系统需要包含环境 ubuntu + python + nginx + nodejs + mysql，虽然可以使用 docker 构建一个 ubuntu 系统进行配置，但是这样就又回到了起点，没有对各部分业务进行解耦。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正确的做法是把这些应用解耦到 4 个容器中，把 python、nginx、nodejs、mysql 分别装到 4 个系统中，尽管这样做看上去很麻烦，但却很好的对架构进行了解耦。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"镜像的来源基本都基于 "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/"},"children":[{"type":"text","value":"Dockerhub"}]},{"type":"text","value":"，当然也有其他的镜像库，但是官方的肯定要香一些。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerhub 类似 Github，本质是镜像仓库，用户可以对仓库中的镜像进行拉取 pull、推送 push 或查找 search 等操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"拉取一个镜像很简单，例如使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker pull ubuntu:15.10"}]},{"type":"text","value":" 命令拉取 ubuntu 的 15.10 版本："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"PS "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" pull ubuntu:15.10\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"15.10"}]},{"type":"text","value":": Pulling from library/ubuntu\nDigest: sha256:02521a2d079595241c6793b2044f02eecf294034f31d6e235ac4b2b54ffc41f3\nStatus: Downloaded newer image "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" ubuntu:15.10\ndocker.io/library/ubuntu:15.10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面的命令将拉取 ubuntu 的 15.10 版本的镜像到本地。其中 Digest 可以理解为镜像的散列值，当镜像内部出现改动时，这个散列值将发生改变。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果使用命令 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker pull ubuntu"}]},{"type":"text","value":" 会怎么样？这会直接拉取最新版本的 ubuntu 镜像，是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker pull ubuntu:latest"}]},{"type":"text","value":" 的简写。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实际上 我们并不需要拉取镜像，当我们根据一个网络镜像创建容器的时候，docker 会自动从网络中获取镜像并存到本地。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果想要知道本地有哪些镜像，可以使用以下命令："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" images"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果需要查看指定镜像的详细信息，可以使用下列命令："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" image inspect "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"image-id"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如何更新镜像？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果要更新一个镜像，可以根据一个容器实例的更新来生成新的镜像。先创建一个容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --tty --interactive ubuntu"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为是一个初始 ubuntu 容器，所以 ping 命令都无法使用。那么我们就对此容器安装 ping 命令（这两行命令在容器中进行）："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-bash","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"apt-get"}]},{"type":"text","value":" update\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"apt-get"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"install"}]},{"type":"text","value":" iputils-ping"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面两行命令将更新软件源并安装 ping 命令，在完成后可以使用 ping 命令测试下是否安装成功，成功后使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":" 退出容器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"执行以下命令根据该容器创建新的镜像："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" commit --author "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"your-name\""}]},{"type":"text","value":" --message "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"本次提交的信息：更新软件源，安装 ping 命令\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"container"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" commit-ubuntu:v2"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用容器的 id 或者名字代替 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<container>"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit-ubuntu"}]},{"type":"text","value":" 是生成镜像的名字，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"v2"}]},{"type":"text","value":" 是生成镜像的 tag 标签。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker images"}]},{"type":"text","value":"，就可以查看到一个名叫 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit-ubuntu"}]},{"type":"text","value":"、tag 为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"v2"}]},{"type":"text","value":" 的新镜像了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果我们使用这个新镜像生成一个新容器，那么新容器可以直接使用 ping 命令。例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"PS "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --interactive --tty commit-ubuntu:v2\nroot@9f6f322be48a:/"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# ping docker.com"}]},{"type":"text","value":"\nPING docker.com "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"141.193"}]},{"type":"text","value":".213.20"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"56"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"84"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" bytes of data.\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"64"}]},{"type":"text","value":" bytes from "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"141.193"}]},{"type":"text","value":".213.20 "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"141.193"}]},{"type":"text","value":".213.20"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":": "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"icmp_seq"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"ttl"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"37"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"time"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"201"}]},{"type":"text","value":" ms\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"64"}]},{"type":"text","value":" bytes from "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"141.193"}]},{"type":"text","value":".213.20 "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"141.193"}]},{"type":"text","value":".213.20"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":": "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"icmp_seq"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"ttl"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"37"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"time"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"198"}]},{"type":"text","value":" ms\n^C\n--- docker.com "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"ping"}]},{"type":"text","value":" statistics ---\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" packets transmitted, "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" received, "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"% packet loss, "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"time"}]},{"type":"text","value":" 2428ms\nrtt min/avg/max/mdev "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"198.179"}]},{"type":"text","value":"/201.965/206.524/3.450 ms\nroot@9f6f322be48a:/"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# exit"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"exit"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"卷 volume"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 创建容器没啥问题，但是 docker run 操作，每次都会生成一个新的容器，新容器不会使用旧容器的数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"volume 可以把本地环境中真实的文件挂载到容器实例中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"比较直接的例子："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"把数据库的数据文件挂载到容器中"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这样不论我们怎么修改容器，容器的数据库文件总是指向本地，不会丢失。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"把应用程序挂在到容器中"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"容器会访问本地文件来运行服务，而不是容器内部的文件来运行。使用场景如前端后端代码挂载。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"卷的使用也很简单，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --volume "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\""},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"$("}]},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"pwd"}]},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":":/app\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":".."}]},{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--volume \"$(pwd):/app\""}]},{"type":"text","value":" 就是把当前路径挂载到虚拟机中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/app"}]},{"type":"text","value":" 路径下，假设当前路径就是代码文件，那么我们每次更新完代码，只需要删掉旧容器，启动新容器即可完成项目部署。此时容器本身的环境没有任何变化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种方式针对代码更新很方便，用户清楚的知道容器里，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/app"}]},{"type":"text","value":" 指向了真是环境的当前文件夹。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有的时候我们并不关注数据的位置，我们只是需要一个存储数据的地方，例如 mysql 的数据文件，都是一堆格式化二进制文件，这些文件只需要找个地方存就可以了。那么就可以使用 docker 来创建一个具名 volume。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"具名 volume 根据关键字在本地环境中映射一个路径"}]},{"type":"text","value":"，创建一个 volume 使用以下命令："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" volume create mysql-data"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时我们就使用 docker 创建了一个名为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysql-data"}]},{"type":"text","value":" 的卷，它映射了本地环境中的某个文件夹。需要查看这个卷的详细信息，可以使用："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" volume inspect mysql-data"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面命令将返回我们这个卷的详细信息，其中就包含了它在本地环境中真实的路径。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"windows 用户的话，会发现其路径还是 linux 的路径，这很正常，因为 windows 中的 docker 本身就是运行在一个虚拟机中，所以路径映射的运行是 docker 服务的虚拟机的路径中。mac os 我没试过。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它的用法和前面直接映射本地路径是一样的，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --volume mysql-data:/home/data/mysql "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":".."}]},{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--volume mysql-data:/home/data/mysql"}]},{"type":"text","value":" 会把卷 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysql-data"}]},{"type":"text","value":" 映射到容器的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/home/data/mysql"}]},{"type":"text","value":" 路径中，假设你的 mysql 配置此文件夹为数据存放路径，那么数据就会根据映射，存放到卷 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysql-data"}]},{"type":"text","value":" 中，你可以在本机找到对应的数据文件。当下次容器更新时，数据会得到重复使用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"网络"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 创建的容器是互不干扰的，默认情况下，他们不在同一网络中，所以无法进行互相访问，例如算法提供的接口，后端无法访问，前端的 ssr 也不能从后端拿到数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"docker 为此提供了网络模块，用户可以使用 docker 创建一个共享网络，多个容器会被圈到同一个内网当中，让彼此可以访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"创建一个网络很简单："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" network create ping-net"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面代码创建了一个叫做 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ping-net"}]},{"type":"text","value":" 的网络，现在这个网络里面什么容器都没有。我们可以在里面添加任意的容器，比如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --detach --interactive --name test1 --network ping-net ubuntu"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面代码创建了一个容器，有一个别名 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"test1"}]},{"type":"text","value":"，这个容器被加进了网络 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ping-net"}]},{"type":"text","value":" 中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"接着我们可以再创建一个容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --interactive --tty --network ping-net ubuntu"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个容器也在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ping-net"}]},{"type":"text","value":" 网络中，并且我们打开了它的终端，为了测试两个容器是否处于同一网络，我们可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ping"}]},{"type":"text","value":" 命令，首先安装（下面命令在第二个容器中执行）："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-bash","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"apt-get"}]},{"type":"text","value":" update\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"apt"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"install"}]},{"type":"text","value":" iputils-ping"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后我们在容器中执行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ping"}]},{"type":"text","value":" 命令，目标是第一个容器的名字 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"test1"}]},{"type":"text","value":"（下面命令在第二个容器中执行）："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-bash","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"ping"}]},{"type":"text","value":" test1"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时可以看到两个容器互连了，它们被分配到了同一个 docker 的虚拟网络中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当然也可以直接使用 ip 地址去访问，但是这样并不安全，docker 不会每次都分配固定 ip 到容器中，除非你主动设置 ip 地址。主动设置参考 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/engine/reference/commandline/run/"},"children":[{"type":"text","value":"docker run"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除此之外，docker 还支持对容器的 ipv6，dns，mac 等都进行配置。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"端口映射"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不论什么应用，总该要有输入输出，不论是 TCP、UDP，又或者是 http。这些接口都是容器内部的应用提供，docker 提供端口映射来把容器中的服务映射到本机上的实际端口上。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run --volume "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\""},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"$("}]},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"pwd"}]},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":":/usr/share/nginx/html:ro\""}]},{"type":"text","value":" --publish "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"8080"}]},{"type":"text","value":":80  --detach nginx"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面命令中："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--volume"}]},{"type":"text","value":" 把当前文件夹挂载到了容器的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/usr/share/nginx/html"}]},{"type":"text","value":" 路径上，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":":ro"}]},{"type":"text","value":" 代表该卷只读，这是 nginx 镜像默认的静态资源文件夹。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--publish"}]},{"type":"text","value":" 把容器的 80 端口映射到了本机的 8080 端口上"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--detach"}]},{"type":"text","value":" 分离模式运行此容器"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nginx"}]},{"type":"text","value":" 是镜像的名字"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在容器启动后，可以在当前文件夹创建一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" 的文件写入以下内容："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"html"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-html","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"hello world!"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后在本机使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"http://localhost:8080"}]},{"type":"text","value":" 进行访问，会发现该地址转发了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" 文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这节内容其实涵盖的知识点很小，但却是如何访问容器内服务的关键。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生成镜像的另一种方式是使用 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/engine/reference/builder/"},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"text","value":" 文件。Dockerfile 文件用来描述需要生成镜像的来源，相关信息，已经容器内部的改变，通过 Dockerfile 文件可以清楚的了解到构建后的镜像是什么样子。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerfile 字如其名，使用它需要先创建一个名为 “Dockerfile” 的文件，注意是没有后缀名的。然后可以简单的键入以下内容："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-dockerfile","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","instruction"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" ubuntu"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这是一个最简单的 Dockerfile 文件，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"FROM ubuntu"}]},{"type":"text","value":" 代表这个镜像将基于 ubuntu 镜像开始构建。如果使用这个 Dockerfile 文件构建一个新的镜像，那么它会和 ubuntu 镜像一模一样。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"执行以下命令根据一个 Dockerfile 文件创建镜像："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" build --tag new-name/ubuntu:v1 "},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"."}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面的代码创建了一个叫做 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"new-name/ubuntu:v1"}]},{"type":"text","value":" 的镜像，最后的小点 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"."}]},{"type":"text","value":" 代表当前路径，它提供一个上下文路径供给 docker 来查找 Dockerfile 文件，所以这条命令需要在创建 Dockerfile 文件的目录执行。这条命令会创建一个新的镜像，它和当前的 ubuntu 镜像完全一致。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerfile 支持让你在构建镜像时执行一些命令，比如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-dockerfile","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","instruction"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" ubuntu"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","instruction"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" apt-get update "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"\\"}]},{"type":"text","value":"\n    && apt install iputils-ping -y"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面的内容描述了创建新镜像时基于原始镜像执行的命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" 参考这个 Dockerfile 文件构建的镜像，会直接包含 ping 命令，通过 Dockerfile 文件我们可以清楚的知道新镜像进行了哪些配置。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerfile 文件依赖 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" 命令来创建镜像。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Docker Compose"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/compose/compose-file/"},"children":[{"type":"text","value":"Docker Compose"}]},{"type":"text","value":" 使用 yaml 文件来共享多个容器并帮助我们定义容器的启动。它可以同时管理多个容器的启动和关闭。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果是 linux 系统，陈旧版本的 Docker Compose 是没有与 docker 进行捆绑安装的，linux 系统需要 Docker Compose 进行安装，"},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/compose/install/"},"children":[{"type":"text","value":"查看这里"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"查看你的 Docker Compose 版本号："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker-compose"}]},{"type":"text","value":" version "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# 陈旧版本的 命令"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# or"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" compose version "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# 新版本的命令，新版本的 compose 已经集成到 docker 中"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在创建一个容器的时候，命令是不可少的。大多数情况下，一个容器的创建都会包含卷 volume、网络，端口映射，启动命令，工作目录，环境变量等等配置，例如创建一个 mysql 的容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"PS"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" run -d "},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"`"}]},{"type":"text","value":"\n  --network todo-app --network-alias mysql "},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"`"}]}]},{"type":"text","value":"\n  -v todo-mysql-data:/var/lib/mysql "},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"`"}]},{"type":"text","value":"\n  -e "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"MYSQL_ROOT_PASSWORD"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":"secret "},{"type":"element","tagName":"span","properties":{"className":["token","variable"]},"children":[{"type":"text","value":"`"}]}]},{"type":"text","value":"\n  -e "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"MYSQL_DATABASE"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":"todos `\n  mysql:5.7"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面的命令是在 windows 的 powershell 中运行，如果使用 linux 或者 mac 系统，需要把 “`” 替换为 “\\”。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面的命令中，我们启动了一个 mysql 容器，我们为其设置了网络，挂载了数据卷，设置了环境变量，但是这样的命令不方便记录或者保存。Docker Compose 解决了这个问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以为上述的容器创建一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 文件，然后键入以下内容："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"yaml"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-yaml","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"version"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"3.7\""}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"services"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"mysqlapp"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"image"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" mysql"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5.7"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"volumes"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" mysql"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"data"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"/var/lib/mysql\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"environment"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"MYSQL_ROOT_PASSWORD"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" secret\n      "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"MYSQL_DATABASE"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" todos\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"volumes"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n  mysql"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"data"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"注意，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"version"}]},{"type":"text","value":" 标记的不是你的应用或者业务逻辑的版本号，它标记的是 Docker Compose 文件的版本号，就类似于 HTML5 的文件定义 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<!DOCTYPE html>"}]},{"type":"text","value":" 一样。"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果本地 volume "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysql-data"}]},{"type":"text","value":" 如果没有创建，docker 会创建一个测试 volume 来代替它。不要在生产中使用测试 volume。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时一个 mysql 服务就被加到了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 文件中，它在创建容器时的名字是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysqlapp"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"也就是说现在我们只需要一个文件，就可配置好我们的 mysql 服务，使用以下命令来开启它："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" compose up --detach"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker exec"}]},{"type":"text","value":" 来访问这个 mysql 服务，在此之前，你需要使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker ps"}]},{"type":"text","value":" 来找到这个容器："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin","class-name"]},"children":[{"type":"text","value":"exec"}]},{"type":"text","value":" --tty --interactive "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"contianer"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" mysql -u root -p"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后输入密码 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":" 回车即可访问这个 mysql 数据库。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里我们没有使用网络，因为 Docker Compose 会自动创建网络，并把各个服务连接到网络中。如果我们需要添加一个后端，那么只需要为后端的服务配置数据库的主机为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mysqlapp:3306"}]},{"type":"text","value":" 即可访问。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Docker compose 还支持共享，上面的例子中只配置了一个 mysql 服务而已，如果你需要，可以把前端后端都配置到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 文件的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"services"}]},{"type":"text","value":" 下，它们会被共享到一个网路中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用以下命令关闭所有服务："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"docker"}]},{"type":"text","value":" compose down"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"你可以像普通的容器一样管理 Docker Compose 启动的容器，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker ps"}]},{"type":"text","value":" 一样可以查看到 Docker Compose 启动的容器列表。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"bugs"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"executor failed running [/bin/sh -c something]: exit code: 139"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个 bug 是我在 windows 上出现的，docker 安装的时候需要安装 wsl 支持虚拟机服务，但是 wsl 对于一些老的系统构建会出现问题。在我使用命令 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"docker build -t runoob/centos:6.7 ."}]},{"type":"text","value":" 构建 centos:6.7 版本的时候，出现这个 bug 反馈。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"解决："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/65429435/docker-fails-to-build-image-with-exit-code-139"},"children":[{"type":"text","value":"参考链接"}]},{"type":"text","value":"，这个问题在多个 Github 上出现过，真的坑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要创建 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"%userprofile%\\.wslconfig"}]},{"type":"text","value":" 文件并写入以下代码后 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"重启 wsl 服务"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-text","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"[wsl2]\nkernelCommandLine = vsyscall=emulate"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"一定要记住需要重启 wsl，我是直接重启电脑。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用处是什么我也不知道，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"%userprofile%"}]},{"type":"text","value":" 就是用户目录，一般在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"C:\\Users\\<username>"}]},{"type":"text","value":"，视当前用户名查看。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"引用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-mirror-acceleration.html"},"children":[{"type":"text","value":"镜像源"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/get-started/overview/"},"children":[{"type":"text","value":"docker 官网"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-tutorial.html"},"children":[{"type":"text","value":"docker | 菜鸟教程"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/65429435/docker-fails-to-build-image-with-exit-code-139"},"children":[{"type":"text","value":"bug: Docker fails to build image with exit code 139.( docker build 的时候，使用的镜像过老，导致和 wsl 不兼容)"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"excerpt":"序 本笔记记录我的 docker 学习记录，参考教材来源于 docker 教程 和 docker | 菜鸟教程。 其中，docker | 菜鸟教程 的文章更工具化和短篇，可以快速查询知识点。而 docker 教程 更加完整，毕竟是官网中译，可以查询更多的 api…","frontmatter":{"id":"f6ece703-7482-4e74-8f34-b88a161538ff","slug":"/docs/notes/docker 笔记","title":"docker 笔记","createAt":"2022-07-26","publish":false,"archives":["笔记"],"desc":null,"nextPage":null,"prevPage":null,"tags":["docker"],"obsolete":null},"headings":[{"depth":2,"value":"序"},{"depth":2,"value":"安装"},{"depth":2,"value":"概念"},{"depth":3,"value":"容器"},{"depth":3,"value":"镜像"},{"depth":3,"value":"卷 volume"},{"depth":3,"value":"网络"},{"depth":3,"value":"端口映射"},{"depth":3,"value":"Dockerfile"},{"depth":3,"value":"Docker Compose"},{"depth":2,"value":"bugs"},{"depth":2,"value":"引用"}],"fields":{"gitinfo":"{\"all\":[{\"hash\":\"1b9923311cb2112a6fd36ecae87942e61d09d652\",\"date\":\"2023-03-29\",\"message\":\"feat: add doc id, add disqus plugin\",\"authorName\":\"Jiahao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"d97fcecaba892fab6d9f7335117b8b54abe3298d\",\"date\":\"2022-08-02\",\"message\":\"docs: update\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"bc327c82c626ddc0818b70e453564351df8e0e53\",\"date\":\"2022-08-02\",\"message\":\"docs: update\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"3cb85d666e088d779f6e4c627195d7e298373534\",\"date\":\"2022-08-02\",\"message\":\"docs: update \\\"docker 笔记\\\"\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"4c231d1680127007983987f52e3291cf5a36d593\",\"date\":\"2022-08-01\",\"message\":\"docs: edit \\\"docker 笔记\\\"\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"b5ff9d2a69457d29d07d5e0952c71af5eb6960ec\",\"date\":\"2022-07-27\",\"message\":\"docs: update\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"fe5cc87762971c0a6fa3ddd7e3df45a4a93d789f\",\"date\":\"2022-07-26\",\"message\":\"docs: add doc docker 笔记\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"}],\"latest\":{\"hash\":\"1b9923311cb2112a6fd36ecae87942e61d09d652\",\"date\":\"2023-03-29\",\"message\":\"feat: add doc id, add disqus plugin\",\"authorName\":\"Jiahao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},\"total\":7}","path":"/docs/notes/docker 笔记"},"parent":{"relativePath":"notes/docker 笔记.md"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"createAt":"2023.03.09","title":"记忆函数的一些思考"},"fields":{"path":"/docs/blogs/记忆函数的一些思考"}},{"frontmatter":{"createAt":"2023.03.06","title":"刘嘉豪的个人简历"},"fields":{"path":"/docs/essay/cv"}},{"frontmatter":{"createAt":"2023.03.01","title":"媒体资源懒加载"},"fields":{"path":"/docs/notes/媒体资源懒加载"}},{"frontmatter":{"createAt":"2023.01.31","title":"如何才能手动触发 React 表单的 onChange 事件"},"fields":{"path":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件"}},{"frontmatter":{"createAt":"2022.12.16","title":"React 如何根据外部状态进行更新"},"fields":{"path":"/docs/blogs/React 如何根据外部状态进行更新"}}]},"site":{"siteMetadata":{"siteUrl":"https://xxwwp.github.io"}}},"pageContext":{"slug":"/docs/notes/docker 笔记"}},
    "staticQueryHashes": []}