{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/docs/notes/rust 笔记",
    "result": {"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"序"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文为我学习 rust 时的笔记，参考的教材为 "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/rust-lang/book"},"children":[{"type":"text","value":"The Rust Programming Language"}]},{"type":"text","value":" 的译本 "},{"type":"element","tagName":"a","properties":{"href":"https://kaisery.github.io/trpl-zh-cn/title-page.html"},"children":[{"type":"text","value":"Rust 程序设计语言"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文不会记录所有教材内容，只对针对性知识进行记录。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"镜像源"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 的库安装如果不配置源会非常慢，基本上起步就陷死。参考以下链接："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-mirror-acceleration.html"},"children":[{"type":"text","value":"镜像源"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://cloud.tencent.com/developer/article/1620144?from=article.detail.1489386"},"children":[{"type":"text","value":"镜像源 2"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"cargo"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"cargo 是 rust 的一个服务工具，主要功能是包管理和，构建 rust 程序。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"cargo 跟随 rust 一起安装，使用以下命令查看 cargo 版本号："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"cargo --version"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个 rust 的 hello world 程序可以使用 cargo 轻松创建："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"shell"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-shell","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"cargo new appname"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这会创建一个 appname 文件夹，里面初始化了一个 rust 应用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 程序可以单独创建，并使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rustc"}]},{"type":"text","value":" 命令对其进行编译打包，这将生成可供系统使用的执行文件。但是一个单独的 rust 文件，没有有效的库标识，编译缓存等，只适合极小的脚本使用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用 cargo 可以对 rust 的库进行依赖，有效缓存编译，提高开发速度，配合编辑器可以提供较好的语法检查。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"零碎记录"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"留白处理"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 代码对留白并不敏感，任意数量的留白只要没有破坏语法结构，都不会影响程序执行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"但需要注意的是，rust 官方强烈推荐使用 4 个空格来缩进。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"变量属性名任意"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"变量和属性的名字不能是一些特殊字符，如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"!@#$%^&*()=+-.>/?;:"}]},{"type":"text","value":" 等，也不可以使用数字开头。但只要是不影响编译的其他任意字符都可以，比如中文也行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"栈数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"标量类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"整型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"整型在计算时仅保留整数位，不会四舍五入。整型包含很多基础类型，无符号有符号，"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"浮点型"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"布尔型"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"字符类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 字符类型很特殊，使用一个 4 字节的空间存储，代表一个 Unicode 标量值。所以 Unicode 字符集里面的表情，汉字，等特殊字符在 rust 中都可以使用字符类型表示，并不是局限于 ASCLL 码。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"复合类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"元组"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"元组描述了一组固定的数据结构，使用圆括号 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}]},{"type":"text","value":" 来包裹，访问符为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"."}]},{"type":"text","value":"。元组也可以使用圆括号进行解构，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let a: (i8, u32, u128) = (1, 20, 30);\nlet (x, _y, _z) = a;\n\nprintln!(\"{},{}\", a.1, x); // 20,1"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"数组"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"数组描述了多个 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"相同的数据类型"}]},{"type":"text","value":"，它的声明、访问、定义、解构都是用方括号 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[]"}]},{"type":"text","value":"，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let a: [u32; 3] = [10, 20, 100];\nlet [x, _y, _z] = a;\n\nprintln!(\"{},{}\", a[1], x); // 20,10"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[u32; 3]"}]},{"type":"text","value":" 表示这是一个 u32 数字共三项的数组。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"标量类型和符合类型数据都会被分配到 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"栈"}]},{"type":"text","value":" 中，其余类型的数据则将分配到堆中，分配到堆中的类型遵守 "},{"type":"element","tagName":"a","properties":{"href":"#%E6%89%80%E6%9C%89%E6%9D%83%E8%A7%84%E5%88%99"},"children":[{"type":"text","value":"所有权规则"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基础类型中是不包含字符串的，尽管 rust 中可以使用字符串字面量，但是这些字面量是被硬编码到 rust 程序中，不可变。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 提供 String 命名空间对字符串进行集中处理，不同于上述的类型，可变字符串被分配到堆中，访问的数独没有上述的基础类型块。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"字符串字面量"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 rust 中，可以使用双引号包裹一段字符作为字符串字面量，它们属于 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&str"}]},{"type":"text","value":" 类型，这种类型的字符串指向一个固定的文件或内存，只读不可修改，不过可以复制。例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let s : &str = \"hello\";\nlet s2 : &str = s;"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&str"}]},{"type":"text","value":" 类型也被称为 slice 类型，因为它们有可能指向一段可变字符串的某个区间或者编译后文件内的某段二进制代码，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&str"}]},{"type":"text","value":" 类型是不可变的，它在内存中被放到栈上。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"堆数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" 类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" 类型为不限制长度的字符串，不同于 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&str"}]},{"type":"text","value":" 类型的是，它被存放在堆中。使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String::from"}]},{"type":"text","value":" 来获取实例。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"结构体"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"描述一组固定的数据结构，可以是具名的键值对，也可以是匿名元组，这些数据被称为结构体的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"字段"}]},{"type":"text","value":"，甚至没有数据。使用关键字 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct"}]},{"type":"text","value":" 声明。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"struct Named {\n    name: String,\n    age: i16,\n}\n\nstruct Anonymous(String, usize);\n\nstruct Nothing;\n\nlet name1 = Named {\n    name: String::from(\"name1\"),\n    age: 19,\n};\n\nlet anonymous1 = Anonymous(String::from(\"anonymous1\"), 20);\nanonymous1.0;"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"结构体访问数据的访问符均为一个小数点 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"."}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"结构体有点类似其他语言中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" 类，结构体能够实现关联结构体数据的函数，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"impl"}]},{"type":"text","value":" 关键字来指定需要实现的函数。这些关联结构体的函数被称作结构体的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"方法"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"struct Anonmous(String);\n\nimpl Anonmous {\n    fn say(&self, param: &str) {\n        println!(\"{}. {}\", self.0, param);\n    }\n}\n\nlet foo = Anonmous(String::from(\"foo ID\"));\n\nfoo.say(\"123\"); // foo ID. 123"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"impl"}]},{"type":"text","value":" 实现的关联函数中，第一个参数必定是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&self"}]},{"type":"text","value":" 是指向结构体数据的引用。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mut"}]},{"type":"text","value":" 进行声明时，整个结构体与其内部结构都是可变的，而不是单指结构体本身，但是不能修改 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"impl"}]},{"type":"text","value":" 描述的方法。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"枚举"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"枚举类似结构体，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"enum"}]},{"type":"text","value":" 关键字声明，主要用来描述同一类型下不同状态的数据。例如性别的男和女，ip 地址中的 ipv4 和 ipv6。枚举类型中描述不同状态的数据被称作 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"成员"}]},{"type":"text","value":"。不同于结构体的是，枚举不能通过元组的方式来匿名描述成员，成员必须是具名的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"enum Sex {\n  男,\n  女\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为成员的状态可能是不同的，所以枚举可以描述成员的类型。例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"enum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nlet foo = Message::Move { x: 100, y: 100 };\nlet bar = Message::ChangeColor(12, 21, 1221);\nlet baz = Message::Quit;"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"枚举成员的访问使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"::"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"枚举也可以声明关联数据的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"方法"}]},{"type":"text","value":"，同结构体语法完全一致，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"impl"}]},{"type":"text","value":" 声明，参考结构体。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":" 类型，空值类型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":" 被用来描述一个可选类型，他允许该类型为空值，它的本质是一个枚举。在原生中大致实现如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"enum Option<T> {\n    None,\n    Some(T),\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":" 的成员 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"None"}]},{"type":"text","value":" 与 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Some"}]},{"type":"text","value":" 被暴露在全局，可以直接使用，不需要类似语法 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<i32>::Some(100)"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以你可以按照如下方式直接访问："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let a = Some(100);\nlet b : Option<i32> = None;"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 中控制 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"None"}]},{"type":"text","value":" 实际上是内部一个枚举值而已，rust 没有其他语言意义中的的空值类型。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"所有权规则"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先，让我们看一下所有权的规则。当我们通过举例说明时，请谨记这些规则："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rust 中的每一个值都有一个被称为其 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"所有者"}]},{"type":"text","value":"（owner）的变量。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"值在任一时刻有且只有一个所有者。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当所有者（变量）离开作用域，这个值将被丢弃。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一般来说，被分配到堆中的数据都将满足所有权规则。一个堆数据只能被一个变量拥有，当把一个堆数据分配给其他变量时，之前的变量将丢失对这个堆数据的所有权，之前的变量将无法访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let s = String::from(\"string\"); // s 获取一个 String 的所有权\nprintln!(\"{}\", s); // 访问 s 有效\nlet s2 = s; // String 数据所有权转移到 s2 ，s 丢失这个数据的所有权\nprintln!(\"{}\", s2); // 访问 s2 有效\nprintln!(\"{}\", s); // error，s 已经没有指向任何数据"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"数据借用"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以通过数据借用的方式，不剥夺原始变量对数据的所有权，类似于其他语言中的引用，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":" 符号来声明借用一个变量或参数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 号来使用被借用的数据，就类似 C 语言的指针一样。不过 rust 支持省略 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 号的使用就可以直接访问借用的数据。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let s = String::from(\"string\");\nlet s2 = &s; // s 对数据的所有权没有转移 ，s2 借用了 s 变量"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种行为也被放在函数参数上，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let s = String::from(\"string\");\nfoo(&s);\n\nfn foo(bar: &String) { /*...*/\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果不使用借用的方式，那么变量会在传递给函数的时候丢失所有权，函数执行结束即刻销毁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"表达式和代码块"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 中使用除了特殊语句例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" 声明，剩余的大部分语句都算作表达式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个最简单的表达式就是字面量，比如数字字面量或者字符串字面量。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}]},{"type":"text","value":" 来包裹一段代码，这段代码被视作一个代码块。每个代码块都有自己的作用域，内部声明的数据外部无法访问，反之可以。每个代码块中，最后一行代码如果没有使用分号结尾，那么这行代码的表达式值将作为该代码块的值。所以说，一个代码块也是一个表达式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如下面的用例中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 的值将变为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let a = {\n    1 + 10;\n    let b = 2 * 5 - 2;\n    1 + 2\n};\n\nprintln!(\"{}\", a); // 3"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"代码块的概念被作用到除去声明的大部分地方，例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if-else"}]},{"type":"text","value":" 语句，函数语句。所以函数的返回值如果是在最后一行，是不需要写 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" 语句的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if-else"}]},{"type":"text","value":" 语句就是表达式，所以 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if-else"}]},{"type":"text","value":" 语句是可以赋值给变量的："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let a = if true { 1 } else { 2 };"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 是 rust 用来辨别数据的一个语句，它提供对指定值的代码映射，有点类似其他语言中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"switch"}]},{"type":"text","value":"，但是和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"switch"}]},{"type":"text","value":" 的表达方式并不一样。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let score = 0;\n\nmatch score {\n    0 => println!(\"恭喜得到零瓜蛋\"),\n    100 => println!(\"100 分满分啊\"),\n    other => println!(\"拿到了 {} 分\", other),\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"非常显而易见，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 对 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"score"}]},{"type":"text","value":" 进行了匹配，特殊的情况是 0 和 100，剩余情况是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"other"}]},{"type":"text","value":" 分支。上面的代码会匹配到 0 的情况。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"other"}]},{"type":"text","value":" 并不是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句的指定的名称，它是一个任意名称 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"通配符"}]},{"type":"text","value":"，放在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句的最后，并且可以省略。没有匹配成功的时候，被匹配的数据会传递给通配符，在通配符的分支中可以对其进行访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句还可以对枚举类型进行匹配。以下是一个官方的示例，对一个可选数字进行递增操作："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"fn plus_one(x: Option<i32>) -> Option<i32> {\n    match x {\n        None => None,\n        Some(i) => Some(i + 1),\n    }\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果使用枚举进行匹配，那么必须穷尽枚举的成员，不然不能通过编译。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句返回的数据类型必须是相同的，不能返回多种数据类型。当没有返回时，通配符使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}]},{"type":"text","value":" 表示没有返回，比如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let foo = 1;\n\nmatch foo {\n    10 => println!(\"{}\", foo),\n    _ => (),\n};"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"if let 语法糖"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 通配符的空返回是比较无用的样板代码，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if let"}]},{"type":"text","value":" 来换一种编写方式。例如如下代码："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let config_max = Some(3u8);\nmatch config_max {\n    Some(max) => println!(\"The maximum is configured to be {}\", max),\n    _ => (),\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其中 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"_ => ()"}]},{"type":"text","value":" 是毫无意义的，只是为了遵守 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句的穷尽规则，有的时候我们只是对 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" 语句进行一个匹配而已，并且没有返回值。那么就可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if let"}]},{"type":"text","value":" 语句来简写："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let config_max = Some(3u8);\nif let Some(max) = config_max {\n    println!(\"The maximum is configured to be {}\", max);\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述代码与前一段代码的行为相同。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if let"}]},{"type":"text","value":" 语句还支持增加一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" 分支，例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"let config_max = Some(3u8);\nif let Some(max) = config_max {\n    println!(\"The maximum is configured to be {}\", max);\n} else {\n    println!(\"Nothing\");\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"代码分离"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"模块定义"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mod"}]},{"type":"text","value":" 关键字来定义一个模块，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pub"}]},{"type":"text","value":" 关键字来公开模块内部的其他模块、函数或数据结构（结构体、枚举等），例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"mod foo {\n    mod bar {\n        fn baz() {\n            println!(\"do something\")\n        }\n    }\n\n    mod other_module {}\n\n    pub struct User {\n        pub name: String,\n        age: u8,\n    }\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"添加 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pub"}]},{"type":"text","value":" 关键字的模块、数据或者函数都是对外进行公开的，外部可以直接访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"结构体如果在模块内声明，那么内部属性将具有隐私性，需要单独设置私有或公有。创建一个含有私有属性的的结构体，只能在模块内部实现，因为外部模块无法访问私有属性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当前作用域内访问结构体将忽略其属性隐私性。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"模块访问"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"模块访问的方式有两种："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"绝对访问"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"相对访问"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"绝对访问："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当前环境下的被引用的模块都会被注册到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"crate"}]},{"type":"text","value":" 中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"crate"}]},{"type":"text","value":" 提供绝对路径来访问这些模块。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"mod foo {\n    pub mod bar {\n        pub fn baz() {}\n    }\n}\n\nfn main() {\n    crate::foo::bar::baz()\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"相对访问："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 提供 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" 关键字指向当前路径和上一级路径，仅在模块内部使用。"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" 类似文件路径的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"./"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"../"}]},{"type":"text","value":"。"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}]},{"type":"text","value":" 是可以被省略的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"mod foo {\n    pub mod bar {\n        pub fn red() -> super::RGB {\n            // `red` 函数属于 `foo::bar` 模块，`self` 关键字将指向此模块\n            // 同上，`super` 关键字在此处指向 `foo` 模块\n            // 下面代码等价于 crate::foo::red();\n            super::RGB(0xff, 0, 0)\n        }\n    }\n\n    pub struct RGB(u8, u8, u8);\n}\n\nfn main() {\n    // 这也是一个相对访问，不过省略了 `self` 关键字。以下代码等价于 self::foo::bar::red();\n    foo::bar::red();\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" 关键字可以连续使用，比如通过 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super::super::super"}]},{"type":"text","value":" 就可以向上移动三层模块嵌套。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 内置全局数据、函数和宏不支持使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"crate"}]},{"type":"text","value":" 来访问，比如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prinln!()"}]},{"type":"text","value":" 等。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"路径引用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不论是相对访问还是绝对访问，都有可能因为模块层次问题导致路径过长，如果存在多次调用，样板代码会过多，这依赖于代码设计。使用模块引用可以减少样板代码。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"路径引用使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" 关键字把另一个模块引入当前作用域。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"mod foo {\n    pub mod bar {\n        pub fn reds() -> super::RGB {\n            super::RGB(0xff, 0, 0)\n        }\n    }\n    pub struct RGB(u8, u8, u8);\n}\n\nfn main() {\n    let arr = [\n        foo::bar::reds(),\n        foo::bar::reds(),\n        foo::bar::reds(),\n        foo::bar::reds(),\n        foo::bar::reds(),\n    ];\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":" 关键字，上述代码可简化为："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"mod foo {\n    pub mod bar {\n        // 这里把 super::RGB 引入当前作用域，后续直接使用 RGB 即可调用 super::RGB\n        use super::RGB;\n        pub fn reds() -> RGB {\n            RGB(0xff, 0, 0)\n        }\n    }\n    pub struct RGB(u8, u8, u8);\n}\n\n// 这里把 foo::bar::reds 引入当前作用域，后续直接使用 reds 即可调用 foo::bar::reds\nuse foo::bar::reds;\nfn main() {\n    let arr = [reds(), reds(), reds(), reds(), reds()];\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种方式减少了很多样板代码。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于同一模块下的路径引用，可以使用使用花括号 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}]},{"type":"text","value":" 进行包裹："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"use std::io::{stdin, stdout};"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" 关键字对路径引用的目标功能进行重命名："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"use std::io as i;\nuse std::io::{stdin as sin, stdout as sout};"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"也可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}]},{"type":"text","value":" 对模块本身进行引用："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"use std::io::{self as io, stdin as sin, stdout as sout};"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"还可以使用 glob 运算符 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 引入模块下所有功能："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"use std::collections::*;"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"文件分离"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".rs"}]},{"type":"text","value":" 文件中，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pub"}]},{"type":"text","value":" 关键字对功能、模块或路径引用等都可以进行导出。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"新建一个文件，名字如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/my_module.rs"}]},{"type":"text","value":"。内容如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"pub mod foo {\n    pub mod bar {\n        use super::RGB;\n        pub fn reds() -> RGB {\n            RGB(0xff, 0, 0)\n        }\n    }\n    pub struct RGB(u8, u8, u8);\n}\n\npub use foo::*;\n\npub struct User {\n    pub name: String,\n}\n\npub fn my_method() {}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述中，在顶级使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pub"}]},{"type":"text","value":" 关键字可以导出当前文件的内容。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/main.rs"}]},{"type":"text","value":" 中使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mod"}]},{"type":"text","value":" 关键字对文件 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/my_module.rs"}]},{"type":"text","value":" 进行调用，它的整个文件被视作一个模块："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"// 调用 `my_module.ts` 文件，文件名即模块名，视作模块 my_module\nmod my_module;\n\n// 对模块内容进行路径引用\nuse my_module::bar;\nuse my_module::my_method;\nuse my_module::User;\n\nfn main() {\n    bar::reds();\n    User {\n        name: String::from(\"joker\"),\n    };\n    my_method();\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"关于文件夹"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 无法直接感知文件夹内的模块，例如创建一个文件夹为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/utils/"}]},{"type":"text","value":"，那么就必须创建一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/utils.rs"}]},{"type":"text","value":" 文件来对其进行管理。在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/utils.rs"}]},{"type":"text","value":" 中，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mod"}]},{"type":"text","value":" 来导入同名文件夹下的其他模块。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"常见集合"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Vec"}]},{"type":"text","value":" 类型。用来描述类似数组的结构。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" 类型。用来描述字符串结构。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std::collections::HashMap"}]},{"type":"text","value":" 类型。用来描述哈希表。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"? 运算符"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rust 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 运算符用来处理 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Result<T,E>"}]},{"type":"text","value":" 类型。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以再在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Result<T,E>"}]},{"type":"text","value":" 类型的表达式后面添加 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 来修饰这个表达式："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option<T>?"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果返回一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Some(data)"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰后会直接得到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" 数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果返回一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"None"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰后会直接执行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return None"}]},{"type":"text","value":" 停止当前函数"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Result<T,E>?"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果返回一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Ok(data)"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰后会直接得到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" 数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果返回一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Err(error)"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰后会直接执行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return Err(error)"}]},{"type":"text","value":" 停止当前函数"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰会主动返回数据，所以它关联当前函数的返回值类型。因为类型兼容性原因，不同错误的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Result"}]},{"type":"text","value":" 如果处在同一个函数中，那么不能同时对两个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Result"}]},{"type":"text","value":" 使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" 修饰符，因为返回值不能同时兼容两种错误类型。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"panic! 宏"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"panic!"}]},{"type":"text","value":" 宏用来主动抛出一个不可恢复的错误，就类似声明一个数组 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[u32; 5]"}]},{"type":"text","value":" 的数组访问其 100 的索引一样，因为越界，程序会直接停止，并打印执行栈等一系列错误信息。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rs"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-rs","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rs"]},"children":[{"type":"text","value":"use core::panic;\n\nfn main() {\n    panic!(\"抛出错误错误\");\n}"}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这在程序无法进行时，很有用，比如一个编写一个 json 文件解析器，但是启动时不指定 json 文件位置，那么程序就无法进行下去，此时就可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"panic"}]},{"type":"text","value":" 抛出错误。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在测试场景中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"panic"}]},{"type":"text","value":" 也非常适用。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"引用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.runoob.com/docker/docker-mirror-acceleration.html"},"children":[{"type":"text","value":"镜像源"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://cloud.tencent.com/developer/article/1620144?from=article.detail.1489386"},"children":[{"type":"text","value":"镜像源 2"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/rust-lang/book"},"children":[{"type":"text","value":"The Rust Programming Language"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://kaisery.github.io/trpl-zh-cn/title-page.html"},"children":[{"type":"text","value":"Rust 程序设计语言"}]}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"excerpt":"序 本文为我学习 rust 时的笔记，参考的教材为 The Rust Programming Language 的译本 Rust 程序设计语言。 本文不会记录所有教材内容，只对针对性知识进行记录。 镜像源 rust…","frontmatter":{"slug":"/docs/notes/rust 笔记","title":"rust 笔记","createAt":"2022-07-26","publish":false,"archives":["笔记"],"desc":null,"nextPage":null,"prevPage":null,"tags":["rust","cargo"]},"headings":[{"depth":2,"value":"序"},{"depth":2,"value":"镜像源"},{"depth":2,"value":"cargo"},{"depth":2,"value":"零碎记录"},{"depth":3,"value":"留白处理"},{"depth":3,"value":"变量属性名任意"},{"depth":3,"value":"栈数据"},{"depth":4,"value":"字符串字面量"},{"depth":3,"value":"堆数据"},{"depth":3,"value":"所有权规则"},{"depth":3,"value":"表达式和代码块"},{"depth":3,"value":"match"},{"depth":3,"value":"if let 语法糖"},{"depth":3,"value":"代码分离"},{"depth":4,"value":"模块定义"},{"depth":4,"value":"模块访问"},{"depth":4,"value":"路径引用"},{"depth":4,"value":"文件分离"},{"depth":3,"value":"常见集合"},{"depth":3,"value":"? 运算符"},{"depth":3,"value":"panic! 宏"},{"depth":2,"value":"引用"}],"fields":{"gitinfo":"{\"all\":[{\"hash\":\"a6630e98ade1adc618ad2cde593f3e85bf0c1fb6\",\"date\":\"2022-08-26\",\"message\":\"docs: doc update\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"c4795e429a6499bdeaf73c11eaf9f90010f93a49\",\"date\":\"2022-07-27\",\"message\":\"docs: add doc rust 笔记\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"}],\"latest\":{\"hash\":\"a6630e98ade1adc618ad2cde593f3e85bf0c1fb6\",\"date\":\"2022-08-26\",\"message\":\"docs: doc update\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},\"total\":2}"},"parent":{"relativePath":"notes/rust 笔记.md"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"createAt":"2023.01.31","title":"如何才能手动触发 React 表单的 onChange 事件"},"fields":{"path":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件"}},{"frontmatter":{"createAt":"2022.12.16","title":"React 如何根据外部状态进行更新"},"fields":{"path":"/docs/blogs/React 如何根据外部状态进行更新"}},{"frontmatter":{"createAt":"2022.07.12","title":"Symbol 笔记"},"fields":{"path":"/docs/notes/Symbol 笔记"}},{"frontmatter":{"createAt":"2022.07.01","title":"react ssr 极简实现"},"fields":{"path":"/docs/blogs/react ssr 极简实现"}},{"frontmatter":{"createAt":"2022.06.24","title":"记录第一次写库"},"fields":{"path":"/docs/essay/记录第一次写库"}}]}},"pageContext":{"slug":"/docs/notes/rust 笔记"}},
    "staticQueryHashes": []}