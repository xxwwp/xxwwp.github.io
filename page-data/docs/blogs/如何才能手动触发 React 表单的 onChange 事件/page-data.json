{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/docs/blogs/如何才能手动触发 React 表单的 onChange 事件",
    "result": {"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"年前项目里面使用到手机号的几个接口都加了区号，就是类似“+86”这种字段，明显就是一个 select 选择器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我预期是把一个 input 或者 select 元素进行封装后，给原生表单元素分发 input 或者 change 事件，使其触发自身被绑定的业务逻辑，这样可以让组件像原生表单元素一样进行工作，然而在进行实现的时候我却犯了难。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"先说说派发事件"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"js 中每个元素都继承自 "},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget"},"children":[{"type":"text","value":"EventTarget"}]},{"type":"text","value":"，EventTarget 一个方法就是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dispatchEvent"}]},{"type":"text","value":"，它被用来分发一个事件给 EventTarget。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用法比如："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-js","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"element"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"dispatchEvent"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Event"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"click\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面一行代码会触发元素的 click 事件，如果该元素之前有绑定过 click 事件，那么相关的逻辑就会执行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以根据上诉的原理，我在 React 中就想通过自己触发表单的 input 或者 change 原生事件来触发 React 的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onChange"}]},{"type":"text","value":" 合成事件，可是 React 不接受这个事件。其他的比如 click 事件等，我也尝试过，React 会监听到并且执行，然而就表单事件没办法。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"总归来说，还是原生表单元素保存了自己的状态，因为就算我不在 React 里面执行，使用原生代码，虽然表单事件可以监听到，但是表单元素的数据却无法进行更新。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原生表单控件自己保存了数据状态，封闭了开发对其的数据改变的分发。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"一个偏方"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"发现上面的问题后，我在各大网站查询解决办法，发现没有一个答案可以从根本上解决上述问题，没有完美的方式触发表单元素 input 或者 change 事件的方式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我想起了 Mui 中的 Select 组件，它就是自定义了选择器并且把 React 的 onChange 事件进行触发了，于是我翻了翻 "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/mui/material-ui/blob/v5.11.6/packages/mui-material/src/Select/SelectInput.js#L291"},"children":[{"type":"text","value":"Mui Select 组件源码"}]},{"type":"text","value":"，发现它的处理方式也很脏。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mui Select 组件部分源码："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-js","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" nativeEvent "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" event"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"nativeEvent "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"||"}]},{"type":"text","value":" event"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" clonedEvent "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"nativeEvent"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"constructor"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"nativeEvent"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"type"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" nativeEvent"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\nObject"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"defineProperty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"clonedEvent"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"target\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","literal-property","property"]},"children":[{"type":"text","value":"writable"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","boolean"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","literal-property","property"]},"children":[{"type":"text","value":"value"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","literal-property","property"]},"children":[{"type":"text","value":"value"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" newValue"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" name "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"onChange"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"clonedEvent"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" child"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mui 中，在点击自定义下拉框中的选项时，把原生事件 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nativeEvent"}]},{"type":"text","value":" 提了出来，然后使用其构造器进行克隆，并把克隆事件的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"target"}]},{"type":"text","value":" 属性进行重新定义，之后把这个不正式的事件对象提交给了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onChange"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mui 也没找到办法触发原生表单的 input 或者 change 事件，只能自定义一个事件对象进行提交。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用户从 Select 组件拿到的事件对象的确是 Event 的实例，可以对其进行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"e.target.value"}]},{"type":"text","value":" 取值，不过 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"e.target"}]},{"type":"text","value":" 不指向 select 或 input 元素，只是一个数据对象，同时这个克隆事件不是 React 提供的合成事件。Mui 这种处理后骗过了 "},{"type":"element","tagName":"a","properties":{"href":"https://react-hook-form.com/"},"children":[{"type":"text","value":"react-hook-form"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"https://formik.org/"},"children":[{"type":"text","value":"formik"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"为什么写这篇文章"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果你不在 React 中对 select 元素进行重新封装，那么几乎不会遇到这个问题，因为在目前的表单元素中，select 的 option 是非常难重新设计的，因为 option 的子节点不接受其他元素，无法自定义。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"同样，如果你在设计非常规表单组件，例如滑块、级联选择器、取色器、时间日期选择器、评分等等，这些组件都会涉及这一问题，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"“如何才能手动触发 React 表单的 onChange 事件”"}]},{"type":"text","value":"，我想你并不想类似 Mui 一样丢一个自建事件对象给到用户。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而如果你放弃原生表单事件，那么基于原生表单封装的 headless 库用起来就会做一些额外工作，大多数表单 headless 库都遵循 React 官方文档写的，使用类似以下方式进行多字段处理："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"style":"counter-reset: linenumber NaN","className":["language-js","line-numbers"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"setFormFields"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","parameter"]},"children":[{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"..."}]},{"type":"text","value":"p"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"e"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"target"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"name"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" e"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"target"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"value"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]},{"type":"element","tagName":"span","properties":{"ariaHidden":"true","className":["line-numbers-rows"],"style":"white-space: normal; width: auto; left: 0;"},"children":[{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]},{"type":"element","tagName":"span","properties":{},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这篇文章中并没有从根本上解决这个问题，因为原生层面就没有更好的解决方法。Mui 中的处理可以借鉴，不然就只有放弃原生事件的提交了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在放弃表单原生事件的情况下，部分表单 headless 库的解决方案："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://react-hook-form.com/"},"children":[{"type":"text","value":"react-hook-form"}]},{"type":"text","value":"：可以尝试使用 "},{"type":"element","tagName":"a","properties":{"href":"https://react-hook-form.com/api/usecontroller/controller"},"children":[{"type":"text","value":"Controller"}]},{"type":"text","value":" 组件"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://formik.org/"},"children":[{"type":"text","value":"formik"}]},{"type":"text","value":"：尝试使用 "},{"type":"element","tagName":"a","properties":{"href":"https://formik.org/docs/api/formik#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void"},"children":[{"type":"text","value":"setFieldValue"}]},{"type":"text","value":" 函数"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"参考与引用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget"},"children":[{"type":"text","value":"EventTarget"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/mui/material-ui/blob/v5.11.6/packages/mui-material/src/Select/SelectInput.js#L291"},"children":[{"type":"text","value":"Mui Select source code"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://react-hook-form.com/"},"children":[{"type":"text","value":"react-hook-form"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://formik.org/"},"children":[{"type":"text","value":"formik"}]}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"excerpt":"年前项目里面使用到手机号的几个接口都加了区号，就是类似“+86”这种字段，明显就是一个 select 选择器。 我预期是把一个 input 或者 select 元素进行封装后，给原生表单元素分发 input 或者 change…","frontmatter":{"id":"683b8db2-e2e4-430d-b99a-4d2ce1d633b8","slug":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件","title":"如何才能手动触发 React 表单的 onChange 事件","createAt":"2023-01-31","publish":true,"archives":["博客"],"desc":null,"nextPage":null,"prevPage":null,"tags":["react","input","select","原生事件"],"obsolete":null},"headings":[{"depth":2,"value":"先说说派发事件"},{"depth":2,"value":"一个偏方"},{"depth":2,"value":"为什么写这篇文章"},{"depth":2,"value":"参考与引用"}],"fields":{"gitinfo":"{\"all\":[{\"hash\":\"1b9923311cb2112a6fd36ecae87942e61d09d652\",\"date\":\"2023-03-29\",\"message\":\"feat: add doc id, add disqus plugin\",\"authorName\":\"Jiahao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},{\"hash\":\"4dc5a4d5ace68d1113b49d58c19b798f1c866588\",\"date\":\"2023-01-31\",\"message\":\"docs: add 如何才能手动触发 React 表单的 onChange 事件\",\"authorName\":\"JiaHao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"}],\"latest\":{\"hash\":\"1b9923311cb2112a6fd36ecae87942e61d09d652\",\"date\":\"2023-03-29\",\"message\":\"feat: add doc id, add disqus plugin\",\"authorName\":\"Jiahao\",\"authorEmail\":\"842935337@qq.com ò\",\"body\":\"\"},\"total\":2}","path":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件"},"parent":{"relativePath":"blogs/如何才能手动触发 React 表单的 onChange 事件.md"}},"allMarkdownRemark":{"nodes":[{"frontmatter":{"createAt":"2023.03.09","title":"记忆函数的一些思考"},"fields":{"path":"/docs/blogs/记忆函数的一些思考"}},{"frontmatter":{"createAt":"2023.03.06","title":"刘嘉豪的个人简历"},"fields":{"path":"/docs/essay/cv"}},{"frontmatter":{"createAt":"2023.03.01","title":"媒体资源懒加载"},"fields":{"path":"/docs/notes/媒体资源懒加载"}},{"frontmatter":{"createAt":"2023.01.31","title":"如何才能手动触发 React 表单的 onChange 事件"},"fields":{"path":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件"}},{"frontmatter":{"createAt":"2022.12.16","title":"React 如何根据外部状态进行更新"},"fields":{"path":"/docs/blogs/React 如何根据外部状态进行更新"}}]},"site":{"siteMetadata":{"siteUrl":"https://xxwwp.github.io"}}},"pageContext":{"slug":"/docs/blogs/如何才能手动触发 React 表单的 onChange 事件"}},
    "staticQueryHashes": []}